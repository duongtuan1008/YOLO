import RPi.GPIO as GPIO
import time
import cv2
import numpy as np
import mediapipe as mp
import time
import threading
from flask import Flask, Response
from yolodetect import YoloDetect
from picamera2 import Picamera2
from shapely.geometry import Point, Polygon
import joblib
import pandas as pd
import os
from datetime import datetime
import pytz
import queue  # Th√™m c√°i n√†y
import pigpio
import mimetypes
import smtplib
from email.message import EmailMessage
import imghdr
import requests  # Th√™m d√≤ng n√†y n·∫øu ch∆∞a c√≥
import hashlib
import mysql.connector
from RPLCD.i2c import CharLCD
import mediapipe as mp
import math
import joblib
from mfrc522 import MFRC522
reader = MFRC522()  # n·∫øu c√≥ tham s·ªë n√†y
rfid_list = []
# Kh·ªüi t·∫°o m√†n h√¨nh LCD
lcd = CharLCD('PCF8574', 0x27)  # Thay '0x27' b·∫±ng ƒë·ªãa ch·ªâ I2C c·ªßa LCD (ki·ªÉm tra b·∫±ng l·ªánh i2cdetect)
# khai bao sender_email Reciever_Email v√† pass_sender 
Sender_email = "duongtuan10082003@gmail.com"
Reciever_Email ="duongtuan1008@gmail.com"
pass_sender = "vrrw tsqa aljl nbrk"

# C√°c ch·∫ø ƒë·ªô m·∫≠t kh·∫©u
mode_changePass = "*#01#"
mode_resetPass = "*#02#"
mode_hardReset = "*#03#"
mode_addRFID = "*101#"
mode_delRFID = "*102#"
mode_delAllRFID = "*103#"


pi = pigpio.pi()

# Kh·ªüi t·∫°o ThreadPoolExecutor v·ªõi t·ªëi ƒëa 2 lu·ªìng (m·ªói servo m·ªôt lu·ªìng)
servo_queue = queue.Queue()
GPIO.setwarnings(False)
# C·∫•u h√¨nh GPIO cho servo v√† ƒë√®n
servo_pin_1 = 17  # Pin servo 1
servo_pin_2 = 18  # Pin servo 2
light_pin = 23  # Pin ƒë√®n
auto_mode = True  # True: t·ª± ƒë·ªông theo ng∆∞·ªùi, False: ƒëi·ªÅu khi·ªÉn tay
current_angle_1 = 90  # Servo tr·ª•c ngang
current_angle_2 = 90  # Servo tr·ª•c d·ªçc
is_yolo_active = True  # B·∫Øt ƒë·∫ßu v·ªõi vi·ªác qu√©t YOLO ho·∫°t ƒë·ªông


# ƒê·ªãnh nghƒ©a ch√¢n GPIO cho h√†ng v√† c·ªôt
ROW_PINS = [6, 13, 19, 26]  # C√°c ch√¢n cho h√†ng R1, R2, R3, R4
COL_PINS = [12, 16, 20, 21]  # C√°c ch√¢n cho c·ªôt C1, C2, C3, C4

GPIO.cleanup()
GPIO.setmode(GPIO.BCM)
RELAY_PIN = 27
BUZZER =25
GPIO.setup(BUZZER,GPIO.OUT)
GPIO.setup(RELAY_PIN, GPIO.OUT)
GPIO.setup(servo_pin_1, GPIO.OUT)
GPIO.setup(servo_pin_2, GPIO.OUT)
GPIO.setup(light_pin, GPIO.OUT)
pass_def = "12345"
mode_changePass = '*#01#'
mode_resetPass = '*#02#'
password_input = ''
key_queue = queue.Queue()
new_pass1 = [''] * 5
new_pass2 = [''] * 5
data_input = []
# C·∫≠p nh·∫≠t ƒë·ªÉ tr√°nh tranh ch·∫•p t√†i nguy√™n
lock = threading.Lock()
KEYPAD = [
    ['1', '2', '3', 'A'],
    ['4', '5', '6', 'B'],
    ['7', '8', '9', 'C'],
    ['*', '0', '#', 'D']
]


# H√†m ki·ªÉm tra th·∫ª RFID c√≥ h·ª£p l·ªá kh√¥ng
def is_rfid_allowed(uid_bytes):
    # Chuy·ªÉn UID th√†nh chu·ªói hex
    uid_hex = ''.join([f"{b:02X}" for b in uid_bytes])  # Chuy·ªÉn m·ªói byte th√†nh hex
    print(f"UID ƒë√£ qu√©t (hex): {uid_hex}")
    
    # Ki·ªÉm tra xem UID c√≥ t·ªìn t·∫°i trong danh s√°ch UID h·ª£p l·ªá t·ª´ c∆° s·ªü d·ªØ li·ªáu kh√¥ng
    allowed_uids = load_rfid_list()  # L·∫•y danh s√°ch UID t·ª´ c∆° s·ªü d·ªØ li·ªáu
    return uid_hex in allowed_uids

# H√†m l·∫•y UID t·ª´ c∆° s·ªü d·ªØ li·ªáu
# H√†m l·∫•y UID t·ª´ c∆° s·ªü d·ªØ li·ªáu
def load_rfid_list():
    try:
        conn = connect_db()
        cursor = conn.cursor()
        cursor.execute("SELECT uid1, uid2, uid3, uid4 FROM rfid_users")
        rows = cursor.fetchall()
        allowed_uids = []
        for row in rows:
            # L∆∞u UID d∆∞·ªõi d·∫°ng chu·ªói hex
            # Chuy·ªÉn c√°c ph·∫ßn t·ª≠ t·ª´ chu·ªói hex (16) th√†nh s·ªë nguy√™n
            uid = ''.join([f"{int(row[i], 16):02X}" for i in range(4)])  # Chuy·ªÉn t·ª´ hex (base 16) th√†nh chu·ªói hex
            allowed_uids.append(uid)
        cursor.close()
        conn.close()
        return allowed_uids
    except Exception as e:
        print("‚ùå L·ªói khi l·∫•y UID t·ª´ DB:", e)
        return []


# K·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu
def connect_db():
    try:
        conn = mysql.connector.connect(
            host="localhost",
            user="root",  # Thay b·∫±ng user MySQL c·ªßa b·∫°n
            password="100803",  # Thay b·∫±ng m·∫≠t kh·∫©u MySQL
            database="door_access"
        )
        return conn
    except mysql.connector.Error as err:
        print(f"‚ùå L·ªói k·∫øt n·ªëi MySQL: {err}")
        return None

# ========== RFID HANDLING ==========

def check_rfid_from_db():
    try:
        conn = connect_db()
        cursor = conn.cursor()
        cursor.execute("SELECT id, uid1, uid2, uid3, uid4 FROM rfid_users ORDER BY id ASC")
        rows = cursor.fetchall()
        print("üì¶ Danh s√°ch RFID trong DB:")
        for row in rows:
            print(f"ID {row[0]}: {row[1]} {row[2]} {row[3]} {row[4]}")
        cursor.close()
        conn.close()
    except Exception as e:
        print("‚ùå L·ªói khi ƒë·ªçc RFID t·ª´ DB:", e)

def is_rfid_allowed(uid_bytes):
    # Chuy·ªÉn UID th√†nh chu·ªói hex
    uid_hex = ''.join([f"{b:02X}" for b in uid_bytes])
    
    # Ki·ªÉm tra xem UID c√≥ t·ªìn t·∫°i trong danh s√°ch UID h·ª£p l·ªá t·ª´ c∆° s·ªü d·ªØ li·ªáu kh√¥ng
    allowed_uids = load_rfid_list()  # L·∫•y danh s√°ch UID t·ª´ c∆° s·ªü d·ªØ li·ªáu
    return uid_hex in allowed_uids

def check_rfid_once():
    global is_yolo_active

    while True:
        with lock:
            # Ki·ªÉm tra xem c√≥ th·∫ª RFID n√†o g·∫ßn ƒë·∫ßu ƒë·ªçc kh√¥ng
            status, _ = reader.MFRC522_Request(reader.PICC_REQIDL)
            if status != reader.MI_OK:
                continue  # Kh√¥ng c√≥ th·∫ª, ti·∫øp t·ª•c qu√©t

            # L·∫•y UID c·ªßa th·∫ª RFID
            status, uid = reader.MFRC522_Anticoll()
            if status != reader.MI_OK:
                continue  # Kh√¥ng th·ªÉ l·∫•y UID th·∫ª, ti·∫øp t·ª•c qu√©t

            # Chuy·ªÉn UID th√†nh d·∫°ng hex ƒë·ªÉ d·ªÖ ki·ªÉm tra
            uid_bytes = uid[:4]
            uid_hex = [f"{b:02X}" for b in uid_bytes]
            print("Th·∫ª qu√©t:", uid_hex)

            # Hi·ªÉn th·ªã th√¥ng tin l√™n LCD
            lcd.clear()

            # Ki·ªÉm tra xem th·∫ª c√≥ h·ª£p l·ªá kh√¥ng
            if is_rfid_allowed(uid_bytes):
                lcd.write_string("ACCESS GRANTED")
                GPIO.output(RELAY_PIN, GPIO.HIGH)  # M·ªü c·ª≠a
                log_access("RFID User", "RFID", "M·ªü c·ª≠a b·∫±ng th·∫ª")  # Ghi log
                time.sleep(5)  # Gi·ªØ c·ª≠a m·ªü trong 5 gi√¢y
                GPIO.output(RELAY_PIN, GPIO.LOW)  # ƒê√≥ng c·ª≠a

                # T·∫°m th·ªùi t·∫Øt YOLO ƒë·ªÉ tr√°nh qu√©t ƒë·ªëi t∆∞·ª£ng trong l√∫c m·ªü c·ª≠a
                is_yolo_active = False
                time.sleep(5)  # Ch·ªù 5 gi√¢y tr∆∞·ªõc khi b·∫≠t l·∫°i YOLO
                is_yolo_active = True  # K√≠ch ho·∫°t l·∫°i YOLO
            else:
                lcd.write_string("INVALID RFID")
                open_buzzer(1)  # B·∫≠t chu√¥ng c·∫£nh b√°o
                SendEmail(Sender_email, pass_sender, Reciever_Email)  # G·ª≠i email c·∫£nh b√°o

            # D·ª´ng giao ti·∫øp v·ªõi th·∫ª RFID sau khi qu√©t xong
            reader.MFRC522_StopCrypto1()  # D·ª´ng giao ti·∫øp v·ªõi th·∫ª RFID
            reset_lcd_to_default()  # Reset LCD

        # Th·ªùi gian ch·ªù tr∆∞·ªõc khi qu√©t l·∫°i (ƒëi·ªÅu ch·ªânh n·∫øu c·∫ßn)
        time.sleep(1)
  # Th·ªùi gian gi·ªØa c√°c l·∫ßn qu√©t (c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh)

# H√†m ghi log khi m·ªü c·ª≠a b·∫±ng RFID
def log_access(user_name, access_method, event_description):
    # Logic ghi log v√†o c∆° s·ªü d·ªØ li·ªáu ho·∫∑c file
    print(f"Logged: {user_name} - {access_method} - {event_description}")

# H√†m ch·∫°y trong m·ªôt lu·ªìng ri√™ng
def run_rfid_thread():
    while True:
        check_rfid_once()
def wait_for_rfid(timeout=10):
    end_time = time.time() + timeout
    while time.time() < end_time:
        status, _ = reader.MFRC522_Request(reader.PICC_REQIDL)
        if status != reader.MI_OK:
            continue

        status, uid = reader.MFRC522_Anticoll()
        if status == reader.MI_OK:
            reader.MFRC522_StopCrypto1()  # D√≤ng s?a ? d√¢y
            return [f"{b:02X}" for b in uid[:4]]
        time.sleep(0.3)
    return None
def read_keypad():
    for row in range(4):  # Loop through all rows
        GPIO.output(ROW_PINS[row], GPIO.HIGH)  # Activate the current row
        for col in range(4):  # Loop through all columns
            if GPIO.input(COL_PINS[col]) == GPIO.HIGH:  # Check if the key is pressed
                key = KEYPAD[row][col]
                GPIO.output(ROW_PINS[row], GPIO.LOW)  # Deactivate the row after key is detected
                return key  # Return the corresponding key
        GPIO.output(ROW_PINS[row], GPIO.LOW)  # Deactivate the row if no key is detected
    return None  # Return None if no key is pressed
def add_new_rfid():
    global id_rf
    lcd.clear()
    lcd.write_string("Nhap ID (1-99)")

    # Nh·∫≠p ID t·ª´ b√†n ph√≠m keypad
    id_rf = ''
    while len(id_rf) < 2:  # Gi·ªõi h·∫°n nh·∫≠p ID ch·ªâ g·ªìm 2 ch·ªØ s·ªë
        key = read_keypad()
        if key:
            print(f"Key pressed: {key}")
            if key.isdigit():
                id_rf += key
                lcd.clear()
                lcd.write_string(f"ID: {id_rf}")
            elif key == '#':  # N·∫øu nh·∫•n '#', x√°c nh·∫≠n ID
                if id_rf.isdigit() and 0 < int(id_rf) <= 99:
                    break
                else:
                    lcd.clear()
                    lcd.write_string("ID ERROR")
                    time.sleep(2)
                    lcd.clear()
                    lcd.write_string("Nhap lai ID")
                    id_rf = ''
                    time.sleep(1)
            time.sleep(0.3)

    print(f"ID nh·∫≠p: {id_rf}")
    lcd.clear()
    lcd.write_string("Quet the lan 1")
    print("üïê ƒê∆∞a th·∫ª l·∫ßn 1...")
    first_uid = wait_for_rfid()
    if first_uid is None:
        lcd.clear()
        lcd.write_string("KHONG THE")
        time.sleep(2)
        return

    print("‚úÖ UID 1:", first_uid)

    # --- Qu√©t l·∫ßn 2 ---
    lcd.clear()
    lcd.write_string("Quet the lan 2")
    print("üïê ƒê∆∞a th·∫ª l·∫°i l·∫ßn 2...")
    second_uid = wait_for_rfid()
    if second_uid is None:
        lcd.clear()
        lcd.write_string("KHONG THE")
        time.sleep(2)
        return

    print("üîÅ UID 2:", second_uid)

    if first_uid != second_uid:
        lcd.clear()
        lcd.write_string("KHONG TRUNG")
        print("‚ö†Ô∏è UID kh√¥ng tr√πng nhau!")
        time.sleep(2)
        return

    # G·ª≠i l√™n server
    try:
        url = f"http://192.168.137.128/api/rfid.php?action=add"
        url += f"&id={id_rf}&uid1={first_uid[0]}&uid2={first_uid[1]}"
        url += f"&uid3={first_uid[2]}&uid4={first_uid[3]}"
        print("üì° G·ª≠i:", url)
        r = requests.get(url)
        print("üì® Server:", r.text)
        lcd.clear()
        lcd.write_string("THEM OK")
        load_rfid_list()
    except:
        lcd.clear()
        lcd.write_string("LOI MANG")

    time.sleep(2)
    reset_lcd_to_default()
#------------keypad--------------------

def get_device_state():
    try:
        res = requests.get("http://192.168.137.128/api/servo_control.php?cmd=get_state", timeout=2)
        data = res.json()
        if data.get("status") == "success":
            return data["data"]  # {"auto": "on", "light": "off"}
    except Exception as e:
        print("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c tr·∫°ng th√°i t·ª´ PHP:", e)
    return {}
def read_auto_mode():
    try:
        with open("/home/pi/auto_mode.txt", "r") as f:
            return f.read().strip() == "on"
    except:
        return True


def log_access(user_name, access_method, event_description):
    conn = connect_db()
    if conn is None:
        print("‚ö† Kh√¥ng th·ªÉ k·∫øt n·ªëi MySQL, b·ªè qua ghi nh·∫≠t k√Ω truy c·∫≠p.")
        return
    
    try:
        cursor = conn.cursor()
        sql = "INSERT INTO access_log (user_name, access_method, event_description, timestamp) VALUES (%s, %s, %s, NOW())"
        values = (user_name, access_method, event_description)
        cursor.execute(sql, values)
        conn.commit()
        print(f"‚úÖ Ghi nh·∫≠t k√Ω v√†o `access_log`: {user_name} - {access_method}")
    except mysql.connector.Error as err:
        print(f"‚ùå L·ªói MySQL khi ghi nh·∫≠t k√Ω v√†o `access_log`: {err}")
    finally:
        cursor.close()
        conn.close()
def open_buzzer(th·ªùi_gian=1):
    GPIO.output(BUZZER, GPIO.HIGH)  # B·∫≠t buzzer
    time.sleep(th·ªùi_gian)           # Gi·ªØ buzzer trong kho·∫£ng th·ªùi gian nh·∫•t ƒë·ªãnh
    GPIO.output(BUZZER, GPIO.LOW)    # T·∫Øt buzzer

# Thi·∫øt l·∫≠p c√°c ch√¢n h√†ng l√† output
for row in ROW_PINS:
    GPIO.setup(row, GPIO.OUT)

# Thi·∫øt l·∫≠p c√°c ch√¢n c·ªôt l√† input v·ªõi pull-down resistor
for col in COL_PINS:
    GPIO.setup(col, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)
#x·ª≠ l√Ω password
#------------------- x·ª≠ l√Ω d·ªØ li·ªáu nh·∫≠p t·ª´ matrix ph√≠m ---------------------
# C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi v√†o c∆° s·ªü d·ªØ li·ªáu
def get_password(user_name):
    try:
        conn = connect_db()
        if conn is None:
            return None

        cursor = conn.cursor()
        cursor.execute("SELECT password FROM system_settings WHERE id = 1")  # L·∫•y m·∫≠t kh·∫©u g·ªëc tr·ª±c ti·∫øp
        result = cursor.fetchone()

        cursor.close()
        conn.close()

        if result:
            password = result[0]  # L·∫•y m·∫≠t kh·∫©u g·ªëc t·ª´ c∆° s·ªü d·ªØ li·ªáu
            print(f"‚úÖ ƒê√£ l·∫•y m·∫≠t kh·∫©u t·ª´ DB:\nPassword: {password}")
            return password  # Tr·∫£ v·ªÅ m·∫≠t kh·∫©u
        else:
            print("‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!")
            return None
    except mysql.connector.Error as err:
        print(f"‚ùå L·ªói khi l·∫•y m·∫≠t kh·∫©u t·ª´ DB: {err}")
        return None


def update_password(user_name, new_password):
    try:
        conn = connect_db()
        if conn is None:
            return {"status": "error", "message": "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu"}

        cursor = conn.cursor()
        # C·∫≠p nh·∫≠t m·∫≠t kh·∫©u tr·ª±c ti·∫øp v√†o b·∫£ng `system_settings`
        cursor.execute("UPDATE system_settings SET password = %s, updated_at = NOW() WHERE id = 1", (new_password,))
        conn.commit()
        cursor.close()
        conn.close()

        return {"status": "success", "message": "M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t"}

    except mysql.connector.Error as err:
        print(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t m·∫≠t kh·∫©u: {err}")
        return {"status": "error", "message": "L·ªói khi c·∫≠p nh·∫≠t m·∫≠t kh·∫©u"}



def SendEmail(sender, pass_sender, receiver):
    # T·∫°o email m·ªõi
    newMessage = EmailMessage()
    newMessage['Subject'] = "CANH BAO !!!"
    newMessage['From'] = sender
    newMessage['To'] = receiver
    newMessage.set_content('CANH BAO AN NINH')  # N·ªôi dung email ch·ªâ l√† c·∫£nh b√°o

    # G·ª≠i email
    try:
        with smtplib.SMTP('smtp.gmail.com', 587) as smtp:
            smtp.starttls()  # B·∫Øt ƒë·∫ßu m√£ h√≥a TLS
            smtp.login(sender, pass_sender)  # ƒêƒÉng nh·∫≠p v√†o email
            smtp.send_message(newMessage)  # G·ª≠i email
            print(f"‚úÖ ƒê√£ g·ª≠i email t·ªõi {receiver} v·ªõi c·∫£nh b√°o.")
    except Exception as e:
        print(f"‚ùå L·ªói khi g·ª≠i email: {e}")
#get d·ªØ li·ªáu t·ª´ b√†n ph√≠m 
# H√†m ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
def isBufferdata(data=[]):
    if len(data) < 5:
        return 0
    for i in range(5):
        if data[i] == '\0':
            return 0
    return 1

# H√†m ghi d·ªØ li·ªáu v√†o bi·∫øn new_pass1 v√† new_pass2
def insertData(data1, data2):
    if len(data1) != len(data2):
        print("L·ªói: K√≠ch th∆∞·ªõc c·ªßa data1 v√† data2 kh√¥ng kh·ªõp.")
        return  # Tho√°t n·∫øu k√≠ch th∆∞·ªõc kh√¥ng kh·ªõp
    for i in range(len(data1)):
        data1[i] = data2[i]  # G√°n gi√° tr·ªã t·ª´ data2 v√†o data1

# H√†m so s√°nh hai danh s√°ch d·ªØ li·ªáu
def compareData(data1=[], data2=[]):
    for i in range(5):
        if data1[i] != data2[i]:
            return False
    return True

# H√†m x√≥a d·ªØ li·ªáu ƒë·∫ßu v√†o
def clear_data_input():
    global data_input
    data_input = []

# H√†m ghi m·∫≠t kh·∫©u m·ªõi v√†o EEPROM (gi·∫£ l·∫≠p)
def writeEpprom(new_pass):
    print(f"Ghi m·∫≠t kh·∫©u m·ªõi v√†o EEPROM: {new_pass}")
    # Th·ª±c hi·ªán ghi v√†o EEPROM ·ªü ƒë√¢y
def clear_lcd():
    lcd.clear()
    lcd.home()  # √êua con tro ve vi tr√≠ ban d?u
    time.sleep(0.1)  


def reset_lcd_to_default():
    clear_lcd()  # X√≥a n·ªôi dung tr√™n LCD
    lcd.write_string("---CLOSEDOOR---")  # Hi·ªÉn th·ªã tr·∫°ng th√°i m·∫∑c ƒë·ªãnh "C·ª≠a kh√≥a"
# H√†m ki·ªÉm tra m·∫≠t kh·∫©u
def read_line(row):
    GPIO.output(row, GPIO.HIGH)  # K√≠ch ho·∫°t h√†ng hi·ªán t·∫°i
    
    for i, col in enumerate(COL_PINS):
        if GPIO.input(col) == 1:
            key_pressed = KEYPAD[ROW_PINS.index(row)][i]  # L·∫•y k√Ω t·ª± t∆∞∆°ng ·ª©ng
            print(f"Key pressed: {key_pressed}")
            data_input.append(key_pressed)  # Th√™m k√Ω t·ª± v√†o data_input
            
            # X√≥a m√†n h√¨nh LCD tr∆∞·ªõc khi c·∫≠p nh·∫≠t n·ªôi dung m·ªõi
            clear_lcd()
            
            # Hi·ªÉn th·ªã ti·∫øn tr√¨nh nh·∫≠p m·∫≠t kh·∫©u tr√™n m√†n h√¨nh LCD
            lcd.write_string("Checking pass:")
            lcd.cursor_pos = (1, 0)  # Di chuy·ªÉn con tr·ªè ƒë·∫øn d√≤ng th·ª© hai
            lcd.write_string('*' * len(data_input))  # Hi·ªÉn th·ªã d·∫•u '*' cho m·ªói k√Ω t·ª± ƒë∆∞·ª£c nh·∫≠p
            
            time.sleep(0.3)  # T·∫°m d·ª´ng ƒë·ªÉ tr√°nh tr√πng l·∫∑p
    GPIO.output(row, GPIO.LOW)  # T·∫Øt h√†ng hi·ªán t·∫°i

# H√†m ki·ªÉm tra m·∫≠t kh·∫©u

def check_pass():
    global password_input, is_checking_password, Sender_email, pass_sender, Reciever_Email, is_yolo_active

    clear_lcd()
    lcd.write_string("Checking pass:")

    while True:
        if len(data_input) < 5:
            for row in ROW_PINS:
                read_line(row)
            time.sleep(0.1)
        else:
            is_checking_password = True
            password_input = ''.join(data_input)

            stored_password = get_password("user_name")
            if stored_password:
                print(f"‚úÖ Nh·∫≠p: {password_input}")
                print(f"‚úÖ DB: {stored_password}")

                # Ki·ªÉm tra m·∫≠t kh·∫©u
                if password_input == stored_password:
                    lcd.clear()
                    lcd.write_string("ACCESS GRANTED")
                    GPIO.output(RELAY_PIN, GPIO.HIGH)
                    log_access("User", "Password", "M·ªü c·ª≠a b·∫±ng m·∫≠t kh·∫©u")
                    time.sleep(5)
                    GPIO.output(RELAY_PIN, GPIO.LOW)

                    is_yolo_active = False
                    time.sleep(10)
                    is_yolo_active = True

                # Ch·∫ø ƒë·ªô thay ƒë·ªïi m·∫≠t kh·∫©u
                elif password_input == mode_changePass:
                    changePass()

                # Ch·∫ø ƒë·ªô reset m·∫≠t kh·∫©u
                elif password_input == mode_resetPass:
                    resetPass()

                # Ch·∫ø ƒë·ªô th√™m th·∫ª RFID
                elif password_input == mode_addRFID:
                    add_new_rfid()

                # Ch·∫ø ƒë·ªô x√≥a th·∫ª RFID
                # elif password_input == mode_delRFID:
                #     del_rfid()

                # # Ch·∫ø ƒë·ªô x√≥a t·∫•t c·∫£ th·∫ª RFID
                # elif password_input == mode_delAllRFID:
                #     del_all_rfid()

                else:
                    lcd.clear()
                    lcd.write_string("WRONG PASSWORD")
                    open_buzzer(1)
                    print("‚ùå Sai m·∫≠t kh·∫©u!")
                    SendEmail(Sender_email, pass_sender, Reciever_Email)

            else:
                print("‚ö† Kh√¥ng l·∫•y ƒë∆∞·ª£c m·∫≠t kh·∫©u t·ª´ DB.")

            is_checking_password = False
            clear_data_input()
            time.sleep(2)
            reset_lcd_to_default()
  # ƒê·∫∑t l·∫°i tr·∫°ng th√°i m√†n h√¨nh v·ªÅ m·∫∑c ƒë·ªãnh  # ƒê·∫∑t l·∫°i tr·∫°ng th√°i m√†n h√¨nh v·ªÅ m·∫∑c ƒë·ªãnh
  # ƒê·∫∑t l·∫°i tr·∫°ng th√°i m√†n h√¨nh v·ªÅ m·∫∑c ƒë·ªãnh


def changePass():
    global password, new_pass1, new_pass2
    clear_lcd()  # X√≥a m√†n h√¨nh ngay khi b·∫Øt ƒë·∫ßu
    lcd.write_string('-- Change Pass --')
    print('--- ƒê·ªïi m·∫≠t kh·∫©u ---')
    time.sleep(2)
    
    clear_data_input()

    clear_lcd()  # Ch·ªâ x√≥a m√†n h√¨nh tr∆∞·ªõc khi hi·ªÉn th·ªã n·ªôi dung m·ªõi
    lcd.write_string("--- New Pass ---")

    # Nh·∫≠p m·∫≠t kh·∫©u m·ªõi l·∫ßn 1
    while True:
        if len(data_input) < 5:
            for row in ROW_PINS:
                read_line(row)
            time.sleep(0.1)

            # Ch·ªâ c·∫≠p nh·∫≠t d·∫•u '*' khi c√≥ s·ª± thay ƒë·ªïi trong data_input
            lcd.cursor_pos = (1, 0)
            lcd.write_string('*' * len(data_input))

        if isBufferdata(data_input):  # Khi ƒë√£ nh·∫≠p ƒë·ªß d·ªØ li·ªáu
            insertData(new_pass1, data_input)
            clear_data_input()  # X√≥a d·ªØ li·ªáu nh·∫≠p l·∫ßn 1
            lcd.clear()  # X√≥a m√†n h√¨nh khi ho√†n th√†nh vi·ªác nh·∫≠p
            lcd.write_string("--- PASSWORD ---")
            print("---- AGAIN ----")
            break

    # Nh·∫≠p l·∫°i m·∫≠t kh·∫©u l·∫ßn 2
    while True:
        if len(data_input) < 5:
            for row in ROW_PINS:
                read_line(row)
            time.sleep(0.1)

            # Hi·ªÉn th·ªã ti·∫øn tr√¨nh nh·∫≠p l·∫°i m·∫≠t kh·∫©u l·∫ßn 2
            lcd.cursor_pos = (1, 0)
            lcd.write_string('*' * len(data_input))

        if isBufferdata(data_input):  # Khi ƒë√£ nh·∫≠p ƒë·ªß l·∫ßn 2
            insertData(new_pass2, data_input)
            break

    time.sleep(1)

    # So s√°nh hai l·∫ßn nh·∫≠p m·∫≠t kh·∫©u
    if compareData(new_pass1, new_pass2):
        lcd.clear()  # Ch·ªâ x√≥a khi th·ª±c s·ª± c·∫ßn hi·ªÉn th·ªã n·ªôi dung kh√°c
        lcd.write_string("--- Success ---")
        print("--- M·∫≠t kh·∫©u kh·ªõp ---")
        time.sleep(1)
        writeEpprom(new_pass2)
        password = ''.join(new_pass2)

        # Ghi m·∫≠t kh·∫©u m·ªõi v√†o c∆° s·ªü d·ªØ li·ªáu
        update_password("user_name", password)

        # Ghi m·∫≠t kh·∫©u m·ªõi v√†o file password.txt
        try:
            with open('password.txt', 'w') as file:
                file.write(password)
            print("M·∫≠t kh·∫©u m·ªõi ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o file.")
        except IOError:
            print("Kh√¥ng th·ªÉ ghi m·∫≠t kh·∫©u v√†o file.")

        # Ghi log khi thay ƒë·ªïi m·∫≠t kh·∫©u
        log_access("Admin", "Change Password", "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng")

        lcd.clear()  # X√≥a m√†n h√¨nh tr∆∞·ªõc khi th√¥ng b√°o th√†nh c√¥ng
        lcd.write_string("ƒê·ªïi MK th√†nh c√¥ng")
        time.sleep(2)

def resetPass():
    global password
    clear_lcd()  # X√≥a LCD tr∆∞·ªõc khi hi·ªÉn th·ªã n·ªôi dung m·ªõi
    lcd.write_string('--- Reset Pass ---')  # Hi·ªÉn th·ªã "Reset Pass" tr√™n LCD
    print('--- Reset Pass ---')
    time.sleep(2)  # Cho ph√©p ng∆∞·ªùi d√πng nh√¨n th·∫•y th√¥ng b√°o tr√™n LCD

    clear_data_input()
    
    # B·∫Øt ƒë·∫ßu qu√° tr√¨nh nh·∫≠p m·∫≠t kh·∫©u hi·ªán t·∫°i ƒë·ªÉ x√°c nh·∫≠n
    clear_lcd()  # X√≥a LCD tr∆∞·ªõc khi hi·ªÉn th·ªã n·ªôi dung m·ªõi
    lcd.write_string("--- PassWord ---")

    while True:
        if len(data_input) < 5:  # Gi·∫£ s·ª≠ m·∫≠t kh·∫©u c√≥ 5 k√Ω t·ª±
            for row in ROW_PINS:
                read_line(row)  # G·ªçi h√†m ƒë·ªÉ ƒë·ªçc k√Ω t·ª± t·ª´ b√†n ph√≠m ma tr·∫≠n
            time.sleep(0.1)  # T·∫°m d·ª´ng m·ªôt ch√∫t ƒë·ªÉ tr√°nh vi·ªác l·∫∑p qu√° nhanh

            # Hi·ªÉn th·ªã ti·∫øn tr√¨nh nh·∫≠p m·∫≠t kh·∫©u hi·ªán t·∫°i
            clear_lcd()  # X√≥a m√†n h√¨nh tr∆∞·ªõc khi c·∫≠p nh·∫≠t
            lcd.write_string("R1enter password")
            lcd.cursor_pos = (1, 0)  # Di chuy·ªÉn con tr·ªè ƒë·∫øn d√≤ng th·ª© hai
            lcd.write_string('*' * len(data_input))  # Hi·ªÉn th·ªã d·∫•u '*' ƒë·∫°i di·ªán cho k√Ω t·ª± ƒë√£ nh·∫≠p

        if isBufferdata(data_input):  # Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ nh·∫≠p ƒë·ªß 5 k√Ω t·ª±
            if compareData(data_input, password):  # So s√°nh v·ªõi m·∫≠t kh·∫©u hi·ªán t·∫°i
                clear_data_input()  # X√≥a d·ªØ li·ªáu nh·∫≠p sau khi x√°c nh·∫≠n th√†nh c√¥ng
                clear_lcd()  # X√≥a m√†n h√¨nh tr∆∞·ªõc khi th√¥ng b√°o th√†nh c√¥ng
                lcd.write_string('---resetting...---')
                print('M·∫≠t kh·∫©u ƒë√∫ng, s·∫µn s√†ng reset!')
                
                # ƒê·ª£i 2 gi√¢y ƒë·ªÉ th√¥ng b√°o th√†nh c√¥ng tr∆∞·ªõc khi ti·∫øp t·ª•c
                time.sleep(2)

                while True:
                    key = None  # ƒê·∫∑t m·∫∑c ƒë·ªãnh key l√† None ƒë·ªÉ ki·ªÉm tra
                    for row in ROW_PINS:
                        GPIO.output(row, GPIO.HIGH)
                        for i, col in enumerate(COL_PINS):
                            if GPIO.input(col) == 1:
                                key = KEYPAD[ROW_PINS.index(row)][i]
                                time.sleep(0.3)  # Tr√°nh tr√πng l·∫∑p khi nh·∫•n
                        GPIO.output(row, GPIO.LOW)

                    if key == '#':  # Khi ng∆∞·ªùi d√πng nh·∫•n ph√≠m '#'
                        new_default_pass = list(pass_def)  # M·∫≠t kh·∫©u m·∫∑c ƒë·ªãnh th√†nh danh s√°ch
                        new_password = list(password)  # Chuy·ªÉn ƒë·ªïi m·∫≠t kh·∫©u hi·ªán t·∫°i th√†nh danh s√°ch
                        insertData(new_password, new_default_pass)  # ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u m·∫∑c ƒë·ªãnh
                        clear_lcd()  # X√≥a LCD tr∆∞·ªõc khi hi·ªÉn th·ªã th√¥ng b√°o m·ªõi
                        lcd.write_string('---reset successful---')
                        print('--- Reset m·∫≠t kh·∫©u th√†nh c√¥ng ---')
                        writeEpprom(pass_def)  # Gi·∫£ l·∫≠p ghi v√†o EEPROM
                        password = ''.join(new_password)  # Chuy·ªÉn ƒë·ªïi danh s√°ch tr·ªü l·∫°i chu·ªói

                        # Ghi m·∫≠t kh·∫©u m·ªõi v√†o file password.txt
                        try:
                            with open('password.txt', 'w') as file:
                                file.write(password)
                            print("M·∫≠t kh·∫©u m·ªõi ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o file.")
                        except IOError:
                            print("Kh√¥ng th·ªÉ ghi m·∫≠t kh·∫©u v√†o file.")

                        clear_data_input()  # X√≥a d·ªØ li·ªáu nh·∫≠p
                        time.sleep(2)  # Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng trong 2 gi√¢y
                        clear_lcd()  # X√≥a m√†n h√¨nh sau khi th√¥ng b√°o th√†nh c√¥ng
                        return  # Tho√°t h√†m reset sau khi ho√†n th√†nh
            else:
                # X·ª≠ l√Ω khi m·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë√∫ng
                clear_lcd()  # X√≥a m√†n h√¨nh tr∆∞·ªõc khi th√¥ng b√°o l·ªói
                lcd.write_string('---ERROR---')
                print('M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!')
                
                # G·ª≠i email c·∫£nh b√°o
                SendEmail(Sender_email, pass_sender, Reciever_Email)

                clear_data_input()  # X√≥a d·ªØ li·ªáu nh·∫≠p khi sai m·∫≠t kh·∫©u
                time.sleep(2)  # Hi·ªÉn th·ªã th√¥ng b√°o trong 2 gi√¢y
                clear_lcd()  # X√≥a m√†n h√¨nh sau khi th√¥ng b√°o sai m·∫≠t kh·∫©u
                break  # K·∫øt th√∫c n·∫øu m·∫≠t kh·∫©u nh·∫≠p sai  # K·∫øt th√∫c n·∫øu m·∫≠t kh·∫©u nh·∫≠p sai

#-----------------------------------------------------------

# H√†m ƒëi·ªÅu khi·ªÉn servo

# H√†m b·∫≠t/t·∫Øt ƒë√®n
def turn_on_light():
    GPIO.output(light_pin, GPIO.HIGH)  # B·∫≠t ƒë√®n

def turn_off_light():
    GPIO.output(light_pin, GPIO.LOW)  # T·∫Øt ƒë√®n

# H√†m l∆∞u ·∫£nh khi ph√°t hi·ªán x√¢m nh·∫≠p
def save_image(frame):
    # L∆∞u ·∫£nh v√†o th∆∞ m·ª•c 'intrusions'
    save_dir = "/home/admin/Desktop/YOLO/YOLO/intrusions"
    os.makedirs(save_dir, exist_ok=True)

    now = datetime.now()
    timestamp = now.strftime('%Y%m%d_%H%M%S_%f')[:-3]  # ƒê·ªãnh d·∫°ng t√™n t·ªáp theo th·ªùi gian

    filename = os.path.join(save_dir, f"alert_INTRUSION_{timestamp}.jpg")
    
    # L∆∞u ·∫£nh
    cv2.imwrite(filename, frame)
    print(f"[üíæ] ·∫¢nh x√¢m nh·∫≠p ƒë√£ l∆∞u: {filename}")



# H√†m ƒëi·ªÅu khi·ªÉn servo
def move_servo(pin, angle):
    # """
    # ƒêi·ªÅu khi·ªÉn servo th√¥ng qua pigpio
    # - pin: GPIO s·ªë (17 ho·∫∑c 18)
    # - angle: g√≥c c·∫ßn quay (0‚Äì180 ƒë·ªô)
    # """

    angle = max(0, min(180, angle))  # Gi·ªõi h·∫°n trong kho·∫£ng an to√†n
    pulsewidth = int(500 + (angle / 180.0) * 2000)  # Chuy·ªÉn g√≥c sang microseconds (500‚Äì2500¬µs)

    pi.set_servo_pulsewidth(pin, pulsewidth)  # G·ª≠i l·ªánh quay servo
    print(f"[‚öôÔ∏è] Servo GPIO{pin} quay ƒë·∫øn: {angle:.1f}¬∞ ‚Üí {pulsewidth} ¬µs")

    time.sleep(0.3)  # Cho ph√©p servo c√≥ th·ªùi gian quay

    # (Tu·ª≥ ch·ªçn) T·∫Øt t√≠n hi·ªáu PWM ƒë·ªÉ servo kh√¥ng rung sau khi quay xong
    pi.set_servo_pulsewidth(pin, 0)




# H√†m ƒëi·ªÅu khi·ªÉn servo trong m·ªôt lu·ªìng ri√™ng
# Thay th·∫ø h√†m move_servo_thread ƒë·ªÉ s·ª≠ d·ª•ng ThreadPoolExecutor
def servo_worker():
    while True:
        task = servo_queue.get()
        if task is None:
            break
        try:
            if isinstance(task, tuple) and len(task) == 2:
                action, args = task
                if callable(action):
                    action(*args)
                else:
                    print("‚ùå L·ªói: action kh√¥ng ph·∫£i callable")
            else:
                print("‚ùå L·ªói: task kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng (action, args)")
        except Exception as e:
            print("‚ùå L·ªói servo task:", e)
        finally:
            servo_queue.task_done()


def follow_person_and_alert(cx, cy, frame_width, frame_height, frame):
    servo_1_angle = (cx / frame_width) * 180
    servo_2_angle = (cy / frame_height) * 180

    servo_queue.put((move_servo, (servo_pin_1, servo_1_angle)))
    servo_queue.put((move_servo, (servo_pin_2, servo_2_angle)))
    servo_queue.put((turn_on_light, ()))
    servo_queue.put((save_image, (frame.copy(),)))  # copy ƒë·ªÉ tr√°nh b·ªã thay ƒë·ªïi

    def delayed_light_off():
        time.sleep(5)
        servo_queue.put((turn_off_light, ()))

    threading.Thread(target=delayed_light_off, daemon=True).start()


# === H√†m ph√°t hi·ªán ng∆∞·ªùi v√† x·ª≠ l√Ω ===
def detect_person_and_alert(frame):
    small_frame = cv2.resize(frame, (416, 416))
    height, width = small_frame.shape[:2]

    blob = cv2.dnn.blobFromImage(small_frame, 1/255.0, (416, 416), swapRB=True, crop=False)
    model.model.setInput(blob)

    layer_names = model.model.getLayerNames()
    output_layers = [layer_names[i - 1] for i in model.model.getUnconnectedOutLayers()]
    outputs = model.model.forward(output_layers)

    detections = []
    for output in outputs:
        for detection in output:
            scores = detection[5:]
            class_id = int(np.argmax(scores))
            confidence = scores[class_id]
            if class_id == 0 and confidence > 0.5:
                center_x = int(detection[0] * width)
                center_y = int(detection[1] * height)
                w = int(detection[2] * width)
                h = int(detection[3] * height)
                x = int(center_x - w / 2)
                y = int(center_y - h / 2)
                detections.append({
                    "label": "person",
                    "box": [x, y, w, h],
                    "center": (center_x, center_y)
                })

    h_ratio = frame.shape[0] / 416
    w_ratio = frame.shape[1] / 416

    for obj in detections:
        x, y, w, h = obj['box']
        x = int(x * w_ratio)
        y = int(y * h_ratio)
        w = int(w * w_ratio)
        h = int(h * h_ratio)
        cx, cy = x + w // 2, y + h // 2

        # Khi ph√°t hi·ªán ng∆∞·ªùi, di chuy·ªÉn servo v√† b·∫≠t ƒë√®n
        follow_person_and_alert(cx, cy, frame.shape[1], frame.shape[0], frame)


behavior_model = joblib.load("models/behavior_model.pkl")

# Kh·ªüi t·∫°o b·ªô nh·ªõ l∆∞u t·ªça ƒë·ªô c≈© ƒë·ªÉ t√≠nh t·ªëc ƒë·ªô
person_last_pos = {}

# === Flask App Kh·ªüi T·∫°o ===
app = Flask(__name__)

# === Camera & Model ===
picam2 = Picamera2()
preview_config = picam2.create_preview_configuration(main={"size": (640, 480)})
picam2.configure(preview_config)
picam2.start()
time.sleep(1)
model = YoloDetect()

# === Bi·∫øn to√†n c·ª•c d√πng chung ===
latest_frame = None
frame_lock = threading.Lock()
points = []
detect = False
person_position = None
person_position_lock = threading.Lock()

class PersonTracker:
    def __init__(self):
        self.people = {}  # id: {bbox, start_time, last_seen}

    def update(self, person_id, bbox):
        now = time.time()
        if person_id in self.people:
            self.people[person_id]["last_seen"] = now
            self.people[person_id]["bbox"] = bbox
        else:
            self.people[person_id] = {"start_time": now, "last_seen": now, "bbox": bbox}

    def get_standing_too_long(self, timeout=10):
        now = time.time()
        result = []
        for pid, data in self.people.items():
            duration = data["last_seen"] - data["start_time"]
            if duration >= timeout:
                result.append((pid, duration, data["bbox"]))
        return result

def point_to_polygon_distance(point, polygon_points):
    if len(polygon_points) < 3:
        return float('inf')  # ch∆∞a ƒë·ªß ƒë·ªãnh nghƒ©a 1 v√πng
    p = Point(point)
    poly = Polygon(polygon_points)
    return p.distance(poly)

# === H√†m Stream MJPEG ===
def generate():
    while True:
        with frame_lock:
            if latest_frame is None:
                continue
            ret, jpeg = cv2.imencode('.jpg', latest_frame)
            if not ret:
                continue
            frame = jpeg.tobytes()
        yield (b'--frame\r\n'
               b'Content-Type: image/jpeg\r\n\r\n' + frame + b'\r\n')

# === Flask Route: Trang ch√≠nh (HTML) ===
@app.route('/')
def index():
    return '''
    <html>
        <head>
            <title>üî¥ Camera Stream</title>
            <style>
                body { background-color: black; text-align: center; margin: 0; }
                img { width: 100vw; height: auto; max-width: 100%; }
            </style>
        </head>
        <body>
            <img src="/video_feed" />
        </body>
    </html>
    '''

# === Flask Route: Tr·∫£ v·ªÅ MJPEG stream ===
@app.route('/video_feed')
def video_feed():
    return Response(generate(), mimetype='multipart/x-mixed-replace; boundary=frame')

# === H√†m v·∫Ω ƒëa gi√°c v√πng c·∫•m ===
def draw_polygon(frame, points):
    for point in points:
        frame = cv2.circle(frame, tuple(point), 5, (0, 0, 255), -1)
    if len(points) > 1:
        frame = cv2.polylines(frame, [np.int32(points)], isClosed=True, color=(255, 0, 0), thickness=2)
    return frame

def point_in_polygon(point, polygon):
    if len(polygon) < 3:
        return False
    return cv2.pointPolygonTest(np.array(polygon, dtype=np.int32), point, False) >= 0

# === H√†m b·∫Øt chu·ªôt tr√°i ƒë·ªÉ t·∫°o v√πng c·∫•m ===
def handle_left_click(event, x, y, flags, param):
    global points
    if event == cv2.EVENT_LBUTTONDOWN and not detect:
        points.append([x, y])


def move_both_servos(angle1, angle2):
    angle1 = max(0, min(180, angle1))
    angle2 = max(0, min(180, angle2))

    pw1 = int(500 + (angle1 / 180.0) * 2000)
    pw2 = int(500 + (angle2 / 180.0) * 2000)

    pi.set_servo_pulsewidth(servo_pin_1, pw1)
    pi.set_servo_pulsewidth(servo_pin_2, pw2)

    time.sleep(0.3)

    pi.set_servo_pulsewidth(servo_pin_1, 0)
    pi.set_servo_pulsewidth(servo_pin_2, 0)
def read_auto_mode():
    try:
        with open("/home/pi/auto_mode.txt", "r") as f:
            return f.read().strip() == "on"
    except:
        return True


def servo_tracking_loop():
    global current_angle_1, current_angle_2

    last_angles = [None, None]  # L∆∞u g√≥c c≈© cho servo 1 v√† 2

    while True:
        time.sleep(0.2)  # c·∫≠p nh·∫≠t m·ªói 200ms

        # üîÑ L·∫•y tr·∫°ng th√°i t·ª´ PHP
        state = get_device_state()
        auto_mode = state.get("auto", "on") == "on"

        if not auto_mode:
            continue  # n·∫øu ch·∫ø ƒë·ªô TAY th√¨ b·ªè qua xoay

        with person_position_lock:
            if person_position is None:
                continue
            cx, cy, w, h = person_position

        angle1 = (cx / w) * 180
        angle2 = (cy / h) * 180

        # CH·ªà g·ª≠i n·∫øu c√≥ thay ƒë·ªïi ƒë√°ng k·ªÉ
        should_update = (
            last_angles[0] is None or abs(angle1 - last_angles[0]) > 3 or
            last_angles[1] is None or abs(angle2 - last_angles[1]) > 3
        )

        if should_update:
            last_angles = [angle1, angle2]
            current_angle_1 = angle1
            current_angle_2 = angle2
            servo_queue.put((move_both_servos, (angle1, angle2)))



# === Lu·ªìng x·ª≠ l√Ω camera v√† hi·ªÉn th·ªã ===
def camera_loop():
    global latest_frame, detect,is_yolo_active

    mp_pose = mp.solutions.pose
    pose_detector = mp_pose.Pose(static_image_mode=False, model_complexity=0, enable_segmentation=False)

    behavior_model = joblib.load("models/behavior_model.pkl")  # ‚úÖ AI model
    person_last_pos = {}

    fps_counter = 0
    fps_display = 0
    fps_timer = time.time()
    frame_count = 0

    tracker = PersonTracker()

    cv2.namedWindow("Intrusion Warning")
    cv2.setMouseCallback("Intrusion Warning", handle_left_click)

    while True:
        try:
            frame = picam2.capture_array()
            frame = cv2.resize(frame, (640, 480))
            frame = cv2.cvtColor(frame, cv2.COLOR_RGBA2BGR)
            frame = cv2.flip(frame, 1)

            frame = draw_polygon(frame, points)

            if detect and len(points) > 2 and frame_count % 2 == 0:
                if is_yolo_active:
                    small_frame = cv2.resize(frame, (416, 416))
                    height, width = small_frame.shape[:2]

                    blob = cv2.dnn.blobFromImage(small_frame, 1/255.0, (416, 416), swapRB=True, crop=False)
                    model.model.setInput(blob)

                    layer_names = model.model.getLayerNames()
                    output_layers = [layer_names[i - 1] for i in model.model.getUnconnectedOutLayers()]
                    outputs = model.model.forward(output_layers)

                    detections = []
                    for output in outputs:
                        for detection in output:
                            scores = detection[5:]
                            class_id = int(np.argmax(scores))
                            confidence = scores[class_id]
                            if class_id == 0 and confidence > 0.5:
                                center_x = int(detection[0] * width)
                                center_y = int(detection[1] * height)
                                w = int(detection[2] * width)
                                h = int(detection[3] * height)
                                x = int(center_x - w / 2)
                                y = int(center_y - h / 2)
                                detections.append({
                                    "label": "person",
                                    "box": [x, y, w, h],
                                    "center": (center_x, center_y)
                                })

                    h_ratio = frame.shape[0] / 416
                    w_ratio = frame.shape[1] / 416

                    for obj in detections:
                        x, y, w, h = obj['box']
                        x = int(x * w_ratio)
                        y = int(y * h_ratio)
                        w = int(w * w_ratio)
                        h = int(h * h_ratio)
                        cx, cy = x + w // 2, y + h // 2
                        with person_position_lock:
                            person_position = (cx, cy, frame.shape[1], frame.shape[0])
                        person_id = hash(f"{x//10}-{y//10}")
                        tracker.update(person_id, (x, y, w, h))

                        # Ki·ªÉm tra xem ng∆∞·ªùi c√≥ v√†o v√πng c·∫•m kh√¥ng
                        if point_in_polygon((cx, cy), points):  # Ki·ªÉm tra n·∫øu ng∆∞·ªùi v√†o v√πng c·∫•m
                            follow_person_and_alert(cx, cy, frame.shape[1], frame.shape[0], frame)
                            cv2.putText(frame, "üö® X√ÇM NH·∫¨P!", (x, y - 10),
                                        cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
                            print(f"[üö®] Ph√°t hi·ªán x√¢m nh·∫≠p t·∫°i ({x}, {y})")
                            model.alert(frame.copy(), alert_type="INTRUSION")

                            # === CH·ª§P ·∫¢NH NG∆Ø·ªúI X√ÇM NH·∫¨P ===
                            save_dir = "/var/www/html/uploads"
                            os.makedirs(save_dir, exist_ok=True)

                            now = datetime.now()
                            timestamp = now.strftime('%Y%m%d_%H%M%S_%f')[:-3]

                            filename = os.path.join(save_dir, f"alert_INTRUSION_{timestamp}.jpg")

                            # C·∫Øt ph·∫ßn ng∆∞·ªùi x√¢m nh·∫≠p ra kh·ªèi khung h√¨nh
                            person_crop = frame[y:y+h, x:x+w]
                            if person_crop.size > 0:
                                cv2.imwrite(filename, person_crop)
                                print(f"[üïí] Gi·ªù l∆∞u ·∫£nh: {now.strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]}")
                                print(f"[üíæ] ·∫¢nh x√¢m nh·∫≠p ƒë√£ l∆∞u: {filename}")

                            person_crop = frame[y:y+h, x:x+w]
                            if person_crop.size > 0:
                                cv2.imwrite(filename, person_crop)
                                print(f"[üíæ] ·∫¢nh x√¢m nh·∫≠p ƒë√£ l∆∞u: {filename}")

                            # === ƒêi·ªÅu khi·ªÉn Servo v√† b·∫≠t ƒë√®n khi ph√°t hi·ªán ng∆∞·ªùi ===
                            follow_person_and_alert(cx, cy, frame.shape[1], frame.shape[0], frame)

                        distance = point_to_polygon_distance((cx, cy), points)
                        prev = person_last_pos.get(person_id)
                        speed = 0
                        if prev:
                            dx = abs(cx - prev[0])
                            dy = abs(cy - prev[1])
                            speed = (dx + dy) / 2
                        person_last_pos[person_id] = (cx, cy)
                        duration = time.time() - tracker.people[person_id]["start_time"]

                        try:
                            features = [[distance, w, h, speed, duration]]
                            pred = behavior_model.predict(features)[0]
                            if pred == 1:
                                cv2.putText(frame, "AI üö® X√ÇM NH·∫¨P", (x, y + h + 20),
                                            cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 0, 255), 2)
                                print(f"[AI üö®] D·ª± ƒëo√°n: X√ÇM NH·∫¨P t·∫°i ({x}, {y})")
                                model.alert(frame.copy(), alert_type="INTRUSION_AI")
                            elif pred == 2:
                                cv2.putText(frame, "AI ü§® NGHI NG·ªú", (x, y + h + 20),
                                            cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 165, 255), 2)
                                print(f"[AI ü§®] D·ª± ƒëo√°n: H√ÄNH VI NGHI NG·ªú t·∫°i ({x}, {y})")
                                model.alert(frame.copy(), alert_type="SUSPICIOUS_AI")
                        except Exception as e:
                            print("[AI ERROR]", e)

                        behavior = "?"
                        if w > 80 and h > 120:
                            person_img = frame[y:y+h, x:x+w]
                            if person_img.size > 0:
                                rgb_person = cv2.cvtColor(person_img, cv2.COLOR_BGR2RGB)
                                result = pose_detector.process(rgb_person)
                                if result.pose_landmarks:
                                    try:
                                        landmarks = result.pose_landmarks.landmark
                                        a = landmarks[mp_pose.PoseLandmark.LEFT_SHOULDER]
                                        b = landmarks[mp_pose.PoseLandmark.LEFT_HIP]
                                        c = landmarks[mp_pose.PoseLandmark.LEFT_KNEE]

                                        def get_angle(a, b, c):
                                            ang = math.degrees(math.atan2(c.y - b.y, c.x - b.x) - 
                                                            math.atan2(a.y - b.y, a.x - b.x))
                                            return abs(ang if ang <= 180 else 360 - ang)

                                        angle = get_angle(a, b, c)
                                        if angle > 140:
                                            behavior = "ƒê·ª®NG"
                                        elif angle > 90:
                                            behavior = "NG·ªíI"
                                        else:
                                            behavior = "N·∫∞M / NG√É?"
                                    except:
                                        behavior = "KH√îNG X√ÅC ƒê·ªäNH"

                        # üö® X√°c ƒë·ªãnh ng√£
                        if behavior == "N·∫∞M / NG√É?":
                            now = time.time()
                            last = tracker.people[person_id].get("last_alert", 0)
                            is_laying_orientation = w > h * 1.3
                            is_low_movement = speed < 2

                            if is_laying_orientation and is_low_movement and now - last > 5:
                                tracker.people[person_id]["last_alert"] = now
                                behavior = "T√â NG√É"
                                cv2.putText(frame, "‚ö†Ô∏è X√ÅC NH·∫¨N NG√É", (x, y + h + 40),
                                            cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
                                print(f"[‚úÖ] Ph√°t hi·ªán NG√É t·∫°i ({x}, {y})")
                                model.alert(frame.copy(), alert_type="FALL_CONFIRMED")
                            else:
                                cv2.putText(frame, "‚ö†Ô∏è NGHI T√â NG√É", (x, y + h + 40),
                                            cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 0, 255), 2)
                                print(f"[‚ùó] Ng∆∞·ªùi c√≥ d·∫•u hi·ªáu ng√£ (ch∆∞a x√°c nh·∫≠n) t·∫°i ({x}, {y})")

                        cv2.rectangle(frame, (x, y), (x + w, y + h), (255, 255, 0), 2)
                        cv2.putText(frame, f"{behavior}", (x, y - 10),
                                    cv2.FONT_HERSHEY_SIMPLEX, 0.7,
                                    (0, 255, 255) if behavior == "T√â NG√É" else (255, 255, 0), 2)

                    warnings = tracker.get_standing_too_long(timeout=10)
                    for pid, duration, bbox in warnings:
                        x, y, w, h = bbox
                        cv2.putText(frame, f"‚è± {duration:.1f}s", (x, y + h + 60),
                                    cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 0, 255), 2)
                        print(f"[‚ö†Ô∏è] Ng∆∞·ªùi ID {pid} ƒë·ª©ng qu√° l√¢u ({duration:.1f}s) t·∫°i {bbox}")

            fps_counter += 1
            if time.time() - fps_timer >= 1.0:
                fps_display = fps_counter
                fps_counter = 0
                fps_timer = time.time()

            cv2.putText(frame, f"FPS: {fps_display}", (10, 30),
                        cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)

            with frame_lock:
                latest_frame = frame.copy()

            cv2.imshow("Intrusion Warning", frame)
            key = cv2.waitKey(1)
            if key == ord('q'):
                break
            elif key == ord('r'):
                points.clear()
                detect = False
            elif key == ord('d') and len(points) > 2:
                points.append(points[0])
                detect = True

            frame_count += 1

        except Exception as e:
            print("‚ùå L·ªói camera loop:", e)
            break

    picam2.stop()
    cv2.destroyAllWindows()


# === Run Camera Loop v√† Web Flask song song ===
if __name__ == '__main__':
    @app.route('/control_servo/<cmd>')
    def control_servo(cmd):
        global auto_mode, current_angle_1, current_angle_2

        if auto_mode:
            return {"status": "error", "message": "ƒêang ·ªü ch·∫ø ƒë·ªô T·ª∞ ƒê·ªòNG"}

        step = 5  # g√≥c xoay m·ªói l·∫ßn nh·∫•n
        if cmd == "up":
            current_angle_2 = max(0, current_angle_2 - step)
        elif cmd == "down":
            current_angle_2 = min(180, current_angle_2 + step)
        elif cmd == "left":
            current_angle_1 = max(0, current_angle_1 - step)
        elif cmd == "right":
            current_angle_1 = min(180, current_angle_1 + step)
        else:
            return {"status": "error", "message": "L·ªánh kh√¥ng h·ª£p l·ªá"}

        # G·ª≠i l·ªánh di chuy·ªÉn ƒë·∫øn g√≥c hi·ªán t·∫°i
        servo_queue.put((move_both_servos, (current_angle_1, current_angle_2)))

        return {"status": "success", "message": f"Servo moved: {cmd}", "angle1": current_angle_1, "angle2": current_angle_2}
    
    
    # Kh·ªüi t·∫°o v√† ch·∫°y lu·ªìng RFID
    rfid_thread = threading.Thread(target=run_rfid_thread)
    rfid_thread.daemon = True  # ƒê·∫£m b·∫£o lu·ªìng n√†y s·∫Ω k·∫øt th√∫c khi ch∆∞∆°ng tr√¨nh ch√≠nh k·∫øt th√∫c
    rfid_thread.start()

    password_thread = threading.Thread(target=check_pass)
    password_thread.start()
    # Kh·ªüi ƒë·ªông lu·ªìng x·ª≠ l√Ω servo queue
    servo_thread = threading.Thread(target=servo_worker, daemon=True)
    servo_thread.start()

    # Kh·ªüi ƒë·ªông lu·ªìng tracking ng∆∞·ªùi (xoay servo theo ng∆∞·ªùi m·ªõi nh·∫•t)
    tracking_thread = threading.Thread(target=servo_tracking_loop, daemon=True)
    tracking_thread.start()

    # Kh·ªüi ƒë·ªông camera loop song song
    camera_thread = threading.Thread(target=camera_loop, daemon=True)
    camera_thread.start()

    # Kh·ªüi ƒë·ªông server Flask
    app.run(host='0.0.0.0', port=5000, debug=False)

    # Khi Flask server k·∫øt th√∫c (th∆∞·ªùng l√† khi b·∫•m Ctrl+C)
    servo_queue.put(None)     # g·ª≠i t√≠n hi·ªáu d·ª´ng cho servo_worker
    servo_thread.join()

